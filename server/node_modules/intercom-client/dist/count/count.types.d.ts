export declare type AppTotalCountResponse = {
    type: 'count.hash';
    company: CountObject;
    user: CountObject;
    lead: CountObject;
    tag: CountObject;
    segment: CountObject;
};
export declare type ConversationCountResponse = {
    type: 'count';
    conversation: {
        assigned: number;
        closed: number;
        open: number;
        unassigned: number;
    };
};
export declare type AdminConversationCountResponse = {
    type: 'count';
    conversation: {
        admin: {
            id: string;
            name: string;
            open: number;
            closed: number;
        }[];
    };
};
export declare type CompanyCountResponse = {
    type: 'count';
    company: CountObject;
};
export declare type CompanySegmentCountResponse = {
    type: 'count';
    company: {
        segment: GenericCountObject[];
    };
};
export declare type CompanyTagCountResponse = {
    type: 'count';
    company: {
        tag: GenericCountObject[];
    };
};
export declare type CompanyUserCountResponse = {
    type: 'count';
    company: {
        user: GenericCountObject & {
            remote_company_id: string;
        }[];
    };
};
export declare type UserCountResponse = {
    type: 'count';
    user: {
        user: CountObject;
    };
};
export declare type UserSegmentCountResponse = {
    type: 'count';
    company: {
        segment: GenericCountObject[];
    };
};
export declare type UserTagCountResponse = {
    type: 'count';
    company: {
        tag: GenericCountObject[];
    };
};
export declare type CountObject = {
    count: number;
};
export declare enum CountType {
    CONVERSATION = "conversation",
    USER = "user",
    COMPANY = "company"
}
export declare enum CountEntity {
    ADMIN = "admin",
    SEGMENT = "segment",
    TAG = "tag",
    USER = "user"
}
declare type GenericCountObject = {
    [title: string]: number;
};
export {};
//# sourceMappingURL=count.types.d.ts.map